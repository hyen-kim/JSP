
==========================================================

JSP

==========================================================

중간고사	
기말고사
출석
실습 및 과제 

연락 : injoo2@gmail.com





1. 웹 동작 방식
● www (world wide web)
	: 인터넷상에 분산되어 존재하는 온갖 종류의 정보를 통일된 방법으로 찾아볼 수 있게
	  하는 광역 정보 서비스 (소프트웨어)
- 1989년 CERN의 Tim Berners-Lee가 제안
- WebServer 내에서
  : Hypertext 형태의 Home Page라는 단위로 보관 및 관리되며, Link라고 하는 기능에 의해
    인터넷상에 지리적으로 분산되어 있는 세계 각지의 Hypertext와 연결

● HTTP (HyperText Transfer Protocol)
	: 웹 클라이언트와 웹 서버 사이에 대화하는 방법 및 
	  데이터 정보를 웹 서버에 웹 클라이언트로 전송하는 방법을
	  정의하는 표준 프로토콜

	: http://로 시작되는 URL를 입력함으로써 웹 서버의 데이터 정보를 획득
	: 무상태 프로토콜 -> 서버가 클라이언트의 요청에 응답한 이후에 클라이언트의 상태에 대하여
			     어떠한 것도 자체적으로 유지관리 하지 않는다는 것

	: 하부에서 데이터를 올바른 전송을 위해 TCP/IP 사용


● HTTP에 기반한 통신의 4단계
	1) 연결 설정하기
	: 클라이언트는 디폴트로 서버의 포트 80번에 TCP 연결

	2) 요청 메시지 전송하기
	: 요청라인 GET/index.html HTTP/1.0
		- GET -> 웹 서버로의 행위를 정의하는 메소드
			* GET, POST
		- index.html -> 서버에 있는 파일에 대한 상대적 URL로서 요청 대상 경로
		- HTTP/1.0 -> 클라이언트가 사용 중인 HTTP 프로토콜 버전

	: 요청 헤더
		- 헤더 정보들은 한 라인에 하나씩 기술
		- 각 라인은 헤더 이름과 값으로 구성
		- 헤더 정보의 끝에는 반드시 공백라인을 추가해서 요청 메시지의 끝임을 서버에 알림

	3) 응답 메시지 전송하기
		- 응답 코드 설명
			-> 100 ~ 199 : 요청이 현재 처리되는 중
			-> 200 ~ 299 : 성공
			-> 300 ~ 399 : 리다이렉션
			-> 400 ~ 499 : 클라이언트 폭의 에러
			-> 500 ~ 599 : 서버 쪽의 에러


		- 응답 헤더
			-> 헤더 정보들은 한 라인에 하나씩 기술
			-> 각 라인은 헤더 이름과 값으로 구성
			-> 헤더 정보의 끝에는 반드시 공백라인을 추가해서 요청 메시지의 끝임을 서버에 알림
			-> 브라우저는 공백 라인을 보자마자 실제 HTML 문서를 받을 준비를 함
	4) 연결 끊기
		- 클라이언트나 서버 혹은 둘다 연결을 닫는다.




-------------------------------------------------------------------------------
< 1강 내용 정리 >
정보 전송을 목적으로해서 서로 연결된 집합체 - 네트워크
그 연결되어 있는 디바이스랑 정보가 무엇이냐에 따라 통신 규약을 다 달라짐
그 중에 TCP/IP 프로토콜을 쓰는 서비스를 인터넷이라고 말함
인터넷은 네트워크 안에 포함이 되는 서비스
그중에서도 웹은 브라우저(인터넷 페이지안에 정보들을 일괄적으로 검색)
브라우저를 통해 서비스를 요청하고 결과를 받는게 웹 서비스
웹 서비스는 하단에 TCP/IP가 항상 존재한다는 것을 기억해야함
-------------------------------------------------------------------------------

● HTTP 프로토콜 실험
	1) cmd 창에서 'telnet www.egov.go.kr 80' 입력
	(windows 기능 사용 안 사용에서 설정)

	2) HTTP 응답 메시지 및 전자민원 웹 사이트의 첫 화면에 해당하는 HTML 소스가 화면에 출력





2. 웹 프로그래밍과 동적 웹 페이지
● 정적 웹페이지
	: 임의의 사용자가 페이지를 가져와서 브라우저상에 보기전에 이미 그 페이지의 모든 내용이 정해짐


● 동적 웹페이지
	: 사용자가 페이지를 요청하는 시점에 그 페이지를 새롭게 구성하는 행위를 수행

● CGI 방식의 동적 웹 페이지 작성 기술
	: 정식 프로그래밍 언어나 스크립트가 아니라 웹 서버와 서버에서 수행중인 일반 프로세스 사이에
  	  정보를 주고 받는 규칙
	: Perl, C, C++ 등의 언어를 지원
	: 프로그램을 호출하여 개별 프로세스를 생성


	- 문제점
	: 각각의 클라이언트 요청에 대하여 독립적인 별도의 프로세스가 생성

● 어플리케이션 서버 방식의 동적 웹 페이지 작성 기술
	: 어플리케이션 서버를 통하여 간접적으로 관련 스크립트를 호출하여 수행
	: Tomat이 바로 JSP 스크립트 엔진을 포함하는 어플리케이션 서버의 대표적인 소프트웨어 


● 컴파일 코드 방식 vs 스크립팅 코드 방식
< 컴파일 코드 방식 >
- CGI 관련 프로그램인 Peri, C, C++과 서블릿 프로그램
- 컴파일된 기계어코드 또는 바이트코드
- 코드 구현 이후 컴파일 과정을 직접 수행해야 함
- 코드를 직접 다시 재컴파일해야 함


< 스크립팅 코드 방식 >
- JSP, PHP, ASP
- 컴파일되기 전 상태인 일반적인 스크립트 코드
- 코드 구현 이후 컴파일 과정은 웹 요청 시 자동으로 수행됨
- 스크립트 내에서 코드를 수정만 하면 되며 재컴파일은 웹 요청 시 자동으로 수행됨



3. 스크립팅 기술
● 서버측 스크립팅 기술
- ASP 
	: 마이크로소프트의 대표적 기술
	: VBScript를 이용해서 매우 쉽게 배우고  사용할 수 있다.
	: 기존에 이미 개발되어 있는 COM 객체를 활용함으로써 개발자들은 필요한 프로그램을 코딩하는 시간을 줄일 수 있다.
	: 닷넷 플랫폼 ( ASP.NET)
	* 단점
	: 마이크로소프트에서 개발한 운영 체제 및 개발 환경에 종속
	-> 윈도우즈 아닌 다른 환경에서 사용 불가
	: 값비싼 마이크로소프트 계열 운영 체제 및 데이터베이스와 통합 개발 환경을 사용해야한다,

- PHP 
	: windows, Unix, Linux 운영체제에서 가장 빠르게 동작하는 웹 사이트 구성 가능
	: 오픈소스 모델로 개발되는 언어이기때문에 다양한 운영 체제와 웹 서버 환경에서 운영될 수 있도록 포팅
	: 소규모 개발자들에게 매우 쉽게 접근할 수 있는 웹 개발 언어
	: 가볍고 사용하기 쉽다.
	: 풍부한 DB 지원 기능을 제공

	* 단점
	: 일반적인 프로그래밍 언어가 가지고 있는 풍부한 기능이 부족
	: 객체지향 프로그래밍 언어가 가지고 있는 캡슐화, 상속성, 재사용성, 모듈화 특성이 
	  PHP는 잘 구현되어 있지 않다.
	: 중대형급 규모의 웹 어플리케이션 개발에는 잘 사용되지 않는다.


- JSP
	: 썬 마이크로시스템즈에서 개발한 Java 언어 기반의 웹 스크립트 언어
	: 스크립팅 기반의 웹 프로그래밍을 지원
		- 서블릿은 컴파일 코드 방식을 따라야 하기 때문에 웹 개발자 입장에서는 불편한 점이 많았다.
	: Java라는 훌륭한 객체지향 언어의 여러 가지 기능을 지원받는다.
		- 클래스 라이브러리, 객체 지향적 코딩, 확실하고 풍부한 보안, 언어 자체가 갖는 우아함
	: 처리 효율면에서도 좋은 평가
		- 웹 요청 시 이미 메모리에 적재된 서블릿 코드에서 바로 응답이 가능
	: 코드의 유지관리 보수 측면에 많은 강점
		- MVC 모델
	: 풍부한 클래스 라이브러리를 활용할 수 있다.

< 클라이언트 측 스크립팅 기술 >
- 서버 측 스크립팅 기술
	-> 웹 서버 내에 코딩해 놓은 파일을 서버 측에서 동작하는 어플리케이션 서버가 직접 처리하여
     	   그 결과를 브라우저로 보내주는 기술

- 클라이언트 측 스크립팅 기술
	-> 요청하는 파일을 그대로 브라우저로 전송하고 브라우저가 그 파일 내에 있는 스크립트 언어를 
	   해석하여 페이지 자체를 동적으로 만들어 주는 기술

- 종류
	-> 자바스크립트
	-> DHTML
	-> CSS
	-> Flash 와 관련된 Actionscript
	-> Ajax
- 최근에 Web 2.0의 패리다임을 실현하기 위해서 클라이언트 측 스크립팅 기술의 중요성이 크게 부각


4. 왜 JSP 인가 ?
● 프리젠테이션 로직과 비지니스 로직의 분리
	- JSP는 프리젠테이션 로직과 비지니스 로직을 효율적으로 분리하여 동적 웹 사이트를 구축할 수 있는 훌륭한 스크립트. 
	  (간편한 MVC 패턴 적용)
	- View 부분 : 프리젠테이션 로직
		-> 브라우저 화면에서의 표현을 꾸미는 절차 및 기능, JSP

	- Model 부분 : 비지니스 로직
		-> 사용자의 요청에 따라 내부적인 처리 절차 및 기능, 자바빈즈

	- Controller 부분
		-> View와 Model 을 연결시켜주는 기능, 서블릿

	- 왜 분리가 중요한가 ?
		-> 웹 페이지의 디자인이 변경되더라도 내부 비지니스 로직을 처리하는 JSP 및 자바빈즈 코드를
		   변경할 필요가 없기 때문
		-> 결제 시스템 변경과 같은 비지니스 로직이 완전히 바뀌는 상황이라도 프리젠테이션 로직을 담당하는 코드에는 전혀 영향을 미치지 않기 때문

● 강력한 이식성
	- Write Once, Run Anywhere. (JVM을 이용한 자바언어의 특성)
	- SOA 개념 적용

● 컴포넌트의 재사용
	- 많은 JSP 페이지나 자바빈즈에서 공통적으로 사용되는 컴포넌트를 만들어 이 컴포넌트를 계속해서 재사용 가능
	- 주소 검색 기능, 한글 처리 기능, 데이터베이스 연결 기능 등을 공통 컴포넌트로 개발

● JSTL, EL, 커스텀 태그 등을 활용한 개발 용이성
	- JSTL 
	- EL
	- 커스텀 태그
	- 웹 어플리케이션 개발을 용이하게 하고 동적 웹 사이트 개발시간을 대폭적으로 단축시켜주는 용도로 활용이 가능

● 서버 자원의 효율적 관리 및 사용 
- 스레드기반의 아키텍처를 사용하여 개선함 
- 최초 요청 시 -> 해당 페이지에 대해 컴파일을 통하여 서블릿이 구성되고 메모리로 적재
- 이후 요청 -> 이미 적재되어 있는 서블릿에서 바로 응답
- 서버의 자원을 효율적으로 활용하면서 동시에 응답속도도 상당히 빠르다. 
  ( <- JSP는 다른 언어에 비해 느리게 처리되는 편이 아니다.)
- 웹 사이트의 응답 속도는 언어 자체의 영향 보다는 서버의 관리 기술 및 로직 처리의 적정성 및 효율성에 더 많은 의존도가 있다.
- ** 서블릿(Servlet) : 서버에서 웹 페이지들을 동적으로 생성하거나, 데이터 처리를 수행하기 위해 자바로 작성된 프로그램
		     : 웹 서버상에서 실행되는 자바의 클래스 파일, 서버측 자바응용프로그램
		     : 자바의 모든 API를 그대로 사용
		     : 자바의 장점 모두 수용



< 웹 컨테이너 >
● JSP와 서블릿을 사용한 웹서버
- HTTP 서버
	: URL 주소의 해석
- 웹 컨테이너
	: 서블릿 클래스 또는 JSP 파일의 실행요청을 처리


